name: Deploy codedays

on:
  repository_dispatch:
    types: [deploy_codedays]
  workflow_dispatch:

jobs:
  save-for-docker-compose:
    name: Save for docker-compose
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Archive docker_compose
        uses: actions/upload-artifact@v1
        with:
          name: docker_compose
          path: docker-compose.yml
      - name: Archive nginx
        uses: actions/upload-artifact@v1
        with:
          name: nginx_conf
          path: nginx
  deploy-create:
    name: Create basic folder
    runs-on: self-hosted
    steps:
      - name: mkdir basic dir
        run: |
          sudo mkdir -p /opt/projects
          sudo chown -R qiwihui.qiwihui /opt/projects
      - name: create docker
        run: sudo docker network create webproxy || exit 0
  deploy-proxy:
    needs: deploy-create
    name: Deploy letsencrypt nginx proxy
    runs-on: self-hosted
    steps:
      - name: setup folder
        run: mkdir -p /opt/projects/
      - name: check if nginx proxy exists
        run: echo "$(sudo docker ps -a | grep nginx-letsencrypt >/dev/null; echo $?)" > HAS_LETSENCRYPT
      - name: setup letsencrypt nginx proxy companion
        run: |
          [[ $(cat HAS_LETSENCRYPT) == 1 ]] && echo "has no nginx letsencrypt" || exit 0
          mkdir -p /opt/projects/nginx-data
          [ ! -d "/opt/projects/docker-compose-letsencrypt-nginx-proxy-companion/" ] && git clone https://github.com/evertramos/docker-compose-letsencrypt-nginx-proxy-companion.git /opt/projects/docker-compose-letsencrypt-nginx-proxy-companion/
          cd /opt/projects/docker-compose-letsencrypt-nginx-proxy-companion
          cp .env.sample .env
          sed -i "s/NGINX_FILES_PATH=.*/NGINX_FILES_PATH=\/opt\/projects\/nginx-data/g" .env
          sudo ./start.sh
  build-fe:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: npm install, build, and test
        working-directory: ./cad_fe
        run: |
          npm install
          npm run build
          rm dist/*/*.map
      - name: Archive production artifacts
        uses: actions/upload-artifact@v1
        with:
          name: cad_fe_dist
          path: cad_fe/dist
  deploy-fe:
    needs: [deploy-proxy, build-fe]
    name: deploy fontend
    runs-on: self-hosted
    steps:
      - run: mkdir -p /opt/projects/codedays/cad_fe/dist/
      - run: rm -rf /opt/projects/codedays/cad_fe/dist/*
      - name: Download built package
        uses: actions/download-artifact@v1
        with:
          name: cad_fe_dist
          path: /opt/projects/codedays/cad_fe/dist/
  compile-server:
    name: Compile codedays server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.6' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      - name: install requirements
        run: |
          sudo apt install -y python3-dev gcc
          pip install -r cad_server/requirements.txt
          pip install Cython
      - name: compile
        working-directory: ./cad_server
        run: |
          python compile.py --rebuild
          git log -1 > build/last_commit_id
      - name: Archive production artifacts
        uses: actions/upload-artifact@v1
        with:
          name: cad_server_build
          path: cad_server/build
  deploy-codedays:
    needs: [compile-server,deploy-fe,save-for-docker-compose]
    name: Deploy server
    runs-on: self-hosted
    env:
      CODEDAYS_SECRET_KEY: ${{ secrets.CODEDAYS_SECRET_KEY }}
      CODEDAYS_DATABASE_PASSWORD: ${{ secrets.CODEDAYS_DATABASE_PASSWORD }}
      CODEDAYS_MAILGUN_API_KEY: ${{ secrets.CODEDAYS_MAILGUN_API_KEY }}
      CODEDAYS_ENCRYPT_KEY: ${{ secrets.CODEDAYS_ENCRYPT_KEY }}
    steps:
      - name: backup project
        working-directory: /opt/projects/codedays/
        run: |
          test -f cad_server/cad_server/local_settings.py && cp cad_server/cad_server/local_settings.py . || echo "no local settings"
          cp -r cad_server cad_server-${GITHUB_SHA::8} && rm -rf cad_server/* || exit 1
      - name: Download built package
        uses: actions/download-artifact@v1
        with:
          name: cad_server_build
          path: /opt/projects/codedays/cad_server/
      - name: Download docker-compose
        uses: actions/download-artifact@v1
        with:
          name: docker_compose
          path: /opt/projects/codedays/
      - name: Download nginx conf
        uses: actions/download-artifact@v1
        with:
          name: nginx_conf
          path: /opt/projects/codedays/nginx/
      - name: get local_settings
        working-directory: /opt/projects/codedays/cad_server/
        run: |
          test -f ../local_settings.py && cp ../local_settings.py cad_server/ || cp cad_server/local_settings_prod.py cad_server/local_settings.py
          sed -i "s/{SECRET_KEY}/${CODEDAYS_SECRET_KEY}/g" cad_server/local_settings.py
          sed -i "s/{DATABASE_PASSWORD}/${CODEDAYS_DATABASE_PASSWORD}/g" cad_server/local_settings.py
          sed -i "s/{MAILGUN_API_KEY}/${CODEDAYS_MAILGUN_API_KEY}/g" cad_server/local_settings.py
          sed -i "s/{ENCRYPT_KEY}/${CODEDAYS_ENCRYPT_KEY}/g" cad_server/local_settings.py
      - name: Docker login
        if: success()
        run: sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
      - name: pull
        if: success()
        working-directory: /opt/projects/codedays/
        run: |
          sudo docker pull qiwihui/codedays:latest
          sudo docker-compose stop
          sudo docker-compose up -d
      - name: setup server
        if: success()
        run: |
          sudo docker exec codedays-server sh -c "cd /cad_server && chmod +x ./setup.sh && ./setup.sh"
          sudo docker exec codedays-server /usr/local/bin/python /cad_server/manage.py migrate
          sudo docker exec codedays-server /usr/local/bin/python /cad_server/manage.py loaddata /cad_server/kb/kb.json /cad_server/cad_server/sites.json
          sudo docker exec codedays-server /etc/init.d/supervisor start
          